insert into KnowledgeAreas(id, image) values (1 ,'http://www.images.com/ka_software_requirements');
insert into KnowledgeAreas(id, image) values (2 ,'http://www.images.com/ka_software_design');
insert into KnowledgeAreas(id, image) values (3 ,'http://www.images.com/ka_software_construction');
insert into KnowledgeAreas(id, image) values (4 ,'http://www.images.com/ka_software_testing');
insert into KnowledgeAreas(id, image) values (5 ,'http://www.images.com/ka_software_maintenance');
insert into KnowledgeAreas(id, image) values (6 ,'http://www.images.com/ka_software_config_management');
insert into KnowledgeAreas(id, image) values (7 ,'http://www.images.com/ka_software_engineering_management');
insert into KnowledgeAreas(id, image) values (8 ,'http://www.images.com/ka_software_engineering_process');
insert into KnowledgeAreas(id, image) values (9 ,'http://www.images.com/ka_software_models_methods');
insert into KnowledgeAreas(id, image) values (10,'http://www.images.com/ka_software_quality');
insert into KnowledgeAreas(id, image) values (11,'http://www.images.com/ka_software_engineering_professional_practice');
insert into KnowledgeAreas(id, image) values (12,'http://www.images.com/ka_software_economics');
insert into KnowledgeAreas(id, image) values (13,'http://www.images.com/ka_computing_foundations');
insert into KnowledgeAreas(id, image) values (14,'http://www.images.com/ka_mathematical_foundations');
insert into KnowledgeAreas(id, image) values (15,'http://www.images.com/ka_engineering_foundations');
insert into KnowledgeAreas(id, image) values (16,'http://www.images.com/ka_other');
                                                                                                   
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (1 , 'PT_PT', 'Requisitos de Software', 'A AC “Requisitos de Software” trata do levantamento, análise, especificação e validação dos requisitos bem como a gestão dos mesmos durante todo o ciclo de vida de um produto de software.\n\nOs requisitos de software são definidos genericamente como:\na) o conjunto de condições/necessidades que o software deve satisfazer de modo a atingir um determinado objectivo;\nb) as restrições à sua concepção e funcionamento.\n\nOs tópicos desta AC detalham a maneira sistemática como a Engenharia de Software deve tratar os Requisitos. Todos os conceitos que esta área engloba são usados no Processo do Ciclo de Vida do Software chamado “Análise de Requisitos de Software” que, apesar de ser frequentemente associado ao período inicial do desenvolvimento de software é uma actividade que se prolonga ao longo do ciclo de vida de um produto de software.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (2 , 'PT_PT', 'Desenho de Software','A AC “Desenho de Software” é o processo de definir a arquitectura, os componentes, interfaces e outras características do software assim como o resultado desse mesmo processo.\n\nComo parte do ciclo de vida do software é um processo no qual os requisitos são analisados de modo a produzir uma descrição da estrutura interna do software que servirá de base à sua construção. O resultado deste processo descreve a Arquitectura do Software, ou seja, como o software é decomposto e organizado em componentes e as interfaces entre esses componentes.\n\nDurante o processo de Desenho, os engenheiros produzem vários modelos que formam uma espécie de planta (ou diagrama) da solução a ser implementada. Modelos estes que podem ser avaliados de modo a verificar se efectivamente respondem aos requisitos do produto.\n\nApesar da similaridade do termo, Software Design não se refere apenas à construção dos componentes gráficos do software, sendo essa actividade apenas uma pequena subparte da muito mais abrangente AC Desenho de Software.'); 
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (3 , 'PT_PT', 'Construção de Software', 'A Construção de Software refere-se à criação detalhada de software através de uma combinação de codificação (também conhecido como programação), verificação, teste e debugging. Por outras palavras, esta AC detalha o conjunto de habilidades que um engenheiro deve possuir de modo a efectivamente construir metodicamente artefactos de software.\n\nA Construção de Software tem uma forte ligação com o Desenho de Software e com o Teste de Software, já que a construção, enquanto processo utiliza como fonte os artefactos resultantes do processo de Desenho e alimenta o processo de Teste.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (4 , 'PT_PT', 'Teste de Software', 'O Teste de Software consiste no conjunto de conhecimentos que o engenheiro de software deve dominar para executar testes ao software.\n\nEnquanto actividade, o Teste consiste na verificação dinâmica que um programa providencia os comportamentos esperados para um conjunto finito de casos de teste adequadamente escolhidos a partir do domínio de execuções tipicamente infinito.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (5 , 'PT_PT', 'Manutenção de Software', 'A Manutenção de Software é o conjunto das actividades necessárias para providenciar um suporte eficaz do software. Isto pressupõe uma modificação sistemática do software após a sua entrega/publicação de modo a corrigir falhas, melhorar o seu desempenho ou mesmo alterações/incrementos de funcionalidade.\n\nA Manutenção tem ganho um relevo crescente agora que as empresas tentam retirar o máximo do seu investimento em software ao prolongar a vida útil dos seus produtos de software.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (6 , 'PT_PT', 'Gestão de Configurações de Software', 'A Gestão de Configurações de Software é a tarefa de identificar as configurações de um software em pontos distintos no tempo com o objectivo de controlar sistematicamente as mudanças no mesmo ao longo do seu ciclo de vida.\n\nCom a utilização de ferramentas como controlos de versões e baselines (conjunto fixo de configurações num determinado ponto no tempo) é assim possível por um lado, em caso de problemas, determinar o que foi alterado e por quem e por fim e corrigir, e por outro, em caso de estabilidade do software, replicar a sua configuração controladamente.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (7 , 'PT_PT', 'Gestão de Engenharia de Software' , 'A Gestão de Engenharia de Software a aplicação de actividades de gestão (como planeamento, coordenação, medição, monitorização, controlo e reporte) com a finalidade de garantir que os produtos e serviços de software são entregues eficazmente, eficientemente e para o benefício dos stakeholders.\n\nA gestão de projectos de software engloba um conjunto de habilidades com impacto decisivo na sua concretização sistematizada.\n\nEntre os diferentes aspectos que um engenheiro tem que gerir num projecto de software encontram-se a aplicação de normas específicas da organização a que pertence, a gestão de recursos humanos (seja a nível de contratações, treino, progressão de carreiras), gestão de comunicação com uma equipa e gestão de custos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (8 , 'PT_PT', 'Processo de Engenharia de Software', 'O Processo de Engenharia de Software é a AC que concerne sobre as actividades de trabalho cumpridas por um engenheiro de software com a finalidade de desenvolver, manter e operar software.\nExemplos destas actividades são requisitos, desenho, construção, teste e gestão de configurações, entre outos.\n\nOs processos de software são especificados com vários objectivos tais como: a facilitação da compreensão humana, comunicação e coordenação; auxiliar a gestão de projectos de software; medir e melhorar a qualidade do software duma maneira eficiente; suportar a melhoria do processo e providenciar uma base para o suporte automático da execução do processo.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (9 , 'PT_PT', 'Modelos e Métodos de Engenharia de Software', 'Modelos e Métodos de Engenharia de Software são ferramentas que impõem estrutura na engenharia de software com o objectivo de tornar essa actividade sistemática, repetível e no geral mais propensa ao sucesso.\n\nOs modelos providenciam uma abordagem à solução de problemas, uma notação e procedimentos para a análise e construção de software ao passo que os métodos providenciam uma abordagem à especificação, desenho, construção, teste e verificação sistemáticas do software e seus produtos de trabalho.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (10, 'PT_PT', 'Qualidade de Software', 'A Qualidade de Software é a capacidade de um produto de software satisfazer as necessidades enunciadas ou implicadas sob determinadas condições, assim como, até onde o produto de software responde aos requisitos estabelecidos – a qualidade depende assim de o quão precisamente os requisitos estabelecidos representam as necessidades, desejos e expectativas dos stakeholders.Por poucas palavras, a Qualidade do software é o reflexo de quão bem um produto de software responde aos requisitos do mesmo produto.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (11, 'PT_PT', 'Prática Profissional de Engenharia de Software', 'A Prática Profissional de Engenharia de Software diz respeito ao conhecimento, habilidades e atitudes que um engenheiro de software deve possuir para praticar a engenharia de software duma forma profissional, responsável e ética.\n\nDevido ao impacto cada vez mais generalizado que o software tem na vida das pessoas, os engenheiros têm que possuir um conjunto de características profissionais e pessoais que lhe permita desenvolver a sua actividade duma forma constantemente criteriosa resultando na criação de software com características conhecidas e de confiança.\n\nA prática profissional significa assim um modo de conduzir um serviço com a finalidade de atingir um certo standard ou critério em, não só o processo de executar o serviço como no produto final desse mesmo serviço.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (12, 'PT_PT', 'Economia de Engenharia de Software', 'A Economia de Engenharia de Software trata da tomada de decisões relacionadas com a Engenharia de Software num contexto de negócio. Isto advém do relacionamento directo entre o sucesso de um produto ou serviço de software e uma boa gestão de negócios.\n\nA Economia é o estudo do valor, custos, recursos e o relacionamento entre eles sob um determinado contexto.Também na disciplina de Engenharia de Software, tanto as actividades com o software resultante têm atributos económicos (têm custos, exigem recursos e têm valor).\n\nA economia em engenharia de software providencia então uma maneira de estudar os atributos do software e os seus processos de forma a relacioná-los sistematicamente com medidas económicas com a finalidade de tomar melhores decisões sobre os mesmos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (13, 'PT_PT', 'Fundações de Computação' , 'A AC Fundações de Computação debruça-se sobre o ambiente de desenvolvimento e de operação no qual o software evolui e é executado – o computador. Isto ocorre pelo simples facto de o software não existir no vácuo nem poder ser executado sem o recurso a um computador – este juntamente com os seus componentes são o núcleo do ambiente onde o software corre.\n\nA disciplina de Engenharia de Software assenta sobre a Ciência da Computação e como tal, a sua importância é absolutamente inestimável e fulcral para o seu corpo de conhecimento. A um engenheiro de software é necessário conhecimentos sobre o computador: o seu hardware, software, tipos de computadores, paradigmas de programação, redes de computadores, compiladores, bases de dados, etc.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (14, 'PT_PT', 'Fundações de Matemática', 'A AC Fundações de Matemática advém da ligação intrínseca entre as disciplinas de Engenhara e Matemática. Na Engenharia de Software no entanto, esta ligação existe mais a um nível da essência da lógica e raciocínio e não tanto de aritmética (sobre os números).\n\nA Matemática é uma disciplina sobre o estudo formal dos sistemas. A sua intervenção a nível da engenharia de software tem uma influência directa nas técnicas de identificação de um conjunto de regras para o raciocínio no contexto de sistemas em estudo. As suas vertentes de linguagem e lógica são também importantes de modo descrever provas matemáticas sobre certos problemas e desenvolver uma solução algorítmica para os mesmos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (15, 'PT_PT', 'Fundações de Engenharia', 'As Fundações da Engenharia é uma AC que advém do facto da Engenharia de Software ser uma disciplina de Engenharia. Tal como mencionado anteriormente, uma engenharia é definida como “a aplicação de uma abordagem sistemática, disciplinada e quantificável a estruturas, máquinas, produtos, sistemas ou processos.\n\nÉ a diferença entre este enunciado e uma outra abordagem mais empírica que permite reconhecer a Engenharia de Software como uma engenharia de plena legitimidade.Como tal, esta AC aborda os aspectos que se aplicam à engenharia de software e outras disciplinas de engenharia, tais como medição, técnicas experimentais ou análise estatística.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (16, 'PT_PT', 'Outra', 'Nenhuma Área do Conhecimento de Engenharia de Software');
                                                                                                   
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (1 , 'EN_UK', 'Software Requirements', 'A AC “Requisitos de Software” trata do levantamento, análise, especificação e validação dos requisitos bem como a gestão dos mesmos durante todo o ciclo de vida de um produto de software.\n\nOs requisitos de software são definidos genericamente como:\na) o conjunto de condições/necessidades que o software deve satisfazer de modo a atingir um determinado objectivo;\nb) as restrições à sua concepção e funcionamento.\n\nOs tópicos desta AC detalham a maneira sistemática como a Engenharia de Software deve tratar os Requisitos. Todos os conceitos que esta área engloba são usados no Processo do Ciclo de Vida do Software chamado “Análise de Requisitos de Software” que, apesar de ser frequentemente associado ao período inicial do desenvolvimento de software é uma actividade que se prolonga ao longo do ciclo de vida de um produto de software.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (2 , 'EN_UK', 'Software Desing','A AC “Desenho de Software” é o processo de definir a arquitectura, os componentes, interfaces e outras características do software assim como o resultado desse mesmo processo.\n\nComo parte do ciclo de vida do software é um processo no qual os requisitos são analisados de modo a produzir uma descrição da estrutura interna do software que servirá de base à sua construção. O resultado deste processo descreve a Arquitectura do Software, ou seja, como o software é decomposto e organizado em componentes e as interfaces entre esses componentes.\n\nDurante o processo de Desenho, os engenheiros produzem vários modelos que formam uma espécie de planta (ou diagrama) da solução a ser implementada. Modelos estes que podem ser avaliados de modo a verificar se efectivamente respondem aos requisitos do produto.\n\nApesar da similaridade do termo, Software Design não se refere apenas à construção dos componentes gráficos do software, sendo essa actividade apenas uma pequena subparte da muito mais abrangente AC Desenho de Software.'); 
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (3 , 'EN_UK', 'Software Construction', 'A Construção de Software refere-se à criação detalhada de software através de uma combinação de codificação (também conhecido como programação), verificação, teste e debugging. Por outras palavras, esta AC detalha o conjunto de habilidades que um engenheiro deve possuir de modo a efectivamente construir metodicamente artefactos de software.\n\nA Construção de Software tem uma forte ligação com o Desenho de Software e com o Teste de Software, já que a construção, enquanto processo utiliza como fonte os artefactos resultantes do processo de Desenho e alimenta o processo de Teste.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (4 , 'EN_UK', 'Software Testing', 'O Teste de Software consiste no conjunto de conhecimentos que o engenheiro de software deve dominar para executar testes ao software.\n\nEnquanto actividade, o Teste consiste na verificação dinâmica que um programa providencia os comportamentos esperados para um conjunto finito de casos de teste adequadamente escolhidos a partir do domínio de execuções tipicamente infinito.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (5 , 'EN_UK', 'Software Maintenance', 'A Manutenção de Software é o conjunto das actividades necessárias para providenciar um suporte eficaz do software. Isto pressupõe uma modificação sistemática do software após a sua entrega/publicação de modo a corrigir falhas, melhorar o seu desempenho ou mesmo alterações/incrementos de funcionalidade.\n\nA Manutenção tem ganho um relevo crescente agora que as empresas tentam retirar o máximo do seu investimento em software ao prolongar a vida útil dos seus produtos de software.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (6 , 'EN_UK', 'Software Configuration Management', 'A Gestão de Configurações de Software é a tarefa de identificar as configurações de um software em pontos distintos no tempo com o objectivo de controlar sistematicamente as mudanças no mesmo ao longo do seu ciclo de vida.\n\nCom a utilização de ferramentas como controlos de versões e baselines (conjunto fixo de configurações num determinado ponto no tempo) é assim possível por um lado, em caso de problemas, determinar o que foi alterado e por quem e por fim e corrigir, e por outro, em caso de estabilidade do software, replicar a sua configuração controladamente.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (7 , 'EN_UK', 'Software Engineering Management' , 'A Gestão de Engenharia de Software a aplicação de actividades de gestão (como planeamento, coordenação, medição, monitorização, controlo e reporte) com a finalidade de garantir que os produtos e serviços de software são entregues eficazmente, eficientemente e para o benefício dos stakeholders.\n\nA gestão de projectos de software engloba um conjunto de habilidades com impacto decisivo na sua concretização sistematizada.\n\nEntre os diferentes aspectos que um engenheiro tem que gerir num projecto de software encontram-se a aplicação de normas específicas da organização a que pertence, a gestão de recursos humanos (seja a nível de contratações, treino, progressão de carreiras), gestão de comunicação com uma equipa e gestão de custos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (8 , 'EN_UK', 'Software Engineering Process', 'O Processo de Engenharia de Software é a AC que concerne sobre as actividades de trabalho cumpridas por um engenheiro de software com a finalidade de desenvolver, manter e operar software.\nExemplos destas actividades são requisitos, desenho, construção, teste e gestão de configurações, entre outos.\n\nOs processos de software são especificados com vários objectivos tais como: a facilitação da compreensão humana, comunicação e coordenação; auxiliar a gestão de projectos de software; medir e melhorar a qualidade do software duma maneira eficiente; suportar a melhoria do processo e providenciar uma base para o suporte automático da execução do processo.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (9 , 'EN_UK', 'Software Engineering Methods and Models', 'Modelos e Métodos de Engenharia de Software são ferramentas que impõem estrutura na engenharia de software com o objectivo de tornar essa actividade sistemática, repetível e no geral mais propensa ao sucesso.\n\nOs modelos providenciam uma abordagem à solução de problemas, uma notação e procedimentos para a análise e construção de software ao passo que os métodos providenciam uma abordagem à especificação, desenho, construção, teste e verificação sistemáticas do software e seus produtos de trabalho.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (10, 'EN_UK', 'Software Quality', 'A Qualidade de Software é a capacidade de um produto de software satisfazer as necessidades enunciadas ou implicadas sob determinadas condições, assim como, até onde o produto de software responde aos requisitos estabelecidos – a qualidade depende assim de o quão precisamente os requisitos estabelecidos representam as necessidades, desejos e expectativas dos stakeholders.Por poucas palavras, a Qualidade do software é o reflexo de quão bem um produto de software responde aos requisitos do mesmo produto.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (11, 'EN_UK', 'Software Engineering Professional Practice', 'A Prática Profissional de Engenharia de Software diz respeito ao conhecimento, habilidades e atitudes que um engenheiro de software deve possuir para praticar a engenharia de software duma forma profissional, responsável e ética.\n\nDevido ao impacto cada vez mais generalizado que o software tem na vida das pessoas, os engenheiros têm que possuir um conjunto de características profissionais e pessoais que lhe permita desenvolver a sua actividade duma forma constantemente criteriosa resultando na criação de software com características conhecidas e de confiança.\n\nA prática profissional significa assim um modo de conduzir um serviço com a finalidade de atingir um certo standard ou critério em, não só o processo de executar o serviço como no produto final desse mesmo serviço.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (12, 'EN_UK', 'Software Engineering Economics', 'A Economia de Engenharia de Software trata da tomada de decisões relacionadas com a Engenharia de Software num contexto de negócio. Isto advém do relacionamento directo entre o sucesso de um produto ou serviço de software e uma boa gestão de negócios.\n\nA Economia é o estudo do valor, custos, recursos e o relacionamento entre eles sob um determinado contexto.Também na disciplina de Engenharia de Software, tanto as actividades com o software resultante têm atributos económicos (têm custos, exigem recursos e têm valor).\n\nA economia em engenharia de software providencia então uma maneira de estudar os atributos do software e os seus processos de forma a relacioná-los sistematicamente com medidas económicas com a finalidade de tomar melhores decisões sobre os mesmos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (13, 'EN_UK', 'Computing Foundations' , 'A AC Fundações de Computação debruça-se sobre o ambiente de desenvolvimento e de operação no qual o software evolui e é executado – o computador. Isto ocorre pelo simples facto de o software não existir no vácuo nem poder ser executado sem o recurso a um computador – este juntamente com os seus componentes são o núcleo do ambiente onde o software corre.\n\nA disciplina de Engenharia de Software assenta sobre a Ciência da Computação e como tal, a sua importância é absolutamente inestimável e fulcral para o seu corpo de conhecimento. A um engenheiro de software é necessário conhecimentos sobre o computador: o seu hardware, software, tipos de computadores, paradigmas de programação, redes de computadores, compiladores, bases de dados, etc.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (14, 'EN_UK', 'Mathematical Foundations', 'A AC Fundações de Matemática advém da ligação intrínseca entre as disciplinas de Engenhara e Matemática. Na Engenharia de Software no entanto, esta ligação existe mais a um nível da essência da lógica e raciocínio e não tanto de aritmética (sobre os números).\n\nA Matemática é uma disciplina sobre o estudo formal dos sistemas. A sua intervenção a nível da engenharia de software tem uma influência directa nas técnicas de identificação de um conjunto de regras para o raciocínio no contexto de sistemas em estudo. As suas vertentes de linguagem e lógica são também importantes de modo descrever provas matemáticas sobre certos problemas e desenvolver uma solução algorítmica para os mesmos.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (15, 'EN_UK', 'Engineering Foundations', 'As Fundações da Engenharia é uma AC que advém do facto da Engenharia de Software ser uma disciplina de Engenharia. Tal como mencionado anteriormente, uma engenharia é definida como “a aplicação de uma abordagem sistemática, disciplinada e quantificável a estruturas, máquinas, produtos, sistemas ou processos.\n\nÉ a diferença entre este enunciado e uma outra abordagem mais empírica que permite reconhecer a Engenharia de Software como uma engenharia de plena legitimidade.Como tal, esta AC aborda os aspectos que se aplicam à engenharia de software e outras disciplinas de engenharia, tais como medição, técnicas experimentais ou análise estatística.');
insert into KnowledgeAreaTranslations(knowledgeAreaId, language, name, description) values (16, 'EN_UK', 'Other', 'Nenhuma Área do Conhecimento de Engenharia de Software');


insert into Topics(id,knowledgeareaid) values (1 , 1); 
insert into Topics(id,knowledgeareaid) values (2 , 1); 
insert into Topics(id,knowledgeareaid) values (3 , 1); 
insert into Topics(id,knowledgeareaid) values (4 , 1); 
insert into Topics(id,knowledgeareaid) values (5 , 1); 
insert into Topics(id,knowledgeareaid) values (6 , 1); 
insert into Topics(id,knowledgeareaid) values (7 , 1); 

insert into Topics(id,knowledgeareaid) values (8 , 2); 
insert into Topics(id,knowledgeareaid) values (9 , 2); 
insert into Topics(id,knowledgeareaid) values (10, 2);  
insert into Topics(id,knowledgeareaid) values (11, 2); 
insert into Topics(id,knowledgeareaid) values (12, 2);
insert into Topics(id,knowledgeareaid) values (13, 2); 
insert into Topics(id,knowledgeareaid) values (14, 2);
insert into Topics(id,knowledgeareaid) values (15, 2);
                                                   
insert into Topics(id,knowledgeareaid) values (16, 3);
insert into Topics(id,knowledgeareaid) values (17, 3);
insert into Topics(id,knowledgeareaid) values (18, 3);
insert into Topics(id,knowledgeareaid) values (19, 3);
insert into Topics(id,knowledgeareaid) values (20, 3);




insert into TopicTranslations(topicId, language, name, description) values (1 ,'PT_PT', 'Fundamentos de Requisitos de Software', 'Sobre a defininição do que é um requisito;\n\na diferença entre um requisito do produto e um requisito do processo;\n\na diferença entre requisitos funcionais e não-funcionais;\n\nrequisitos inter-dependentes;\n\ncomo classificar quantitativamente requisitos;\n\ndiferença entre requisitos de sistema e de software.' );
insert into TopicTranslations(topicId, language, name, description) values (2 ,'PT_PT', 'Processo de Requisitos', 'Sobre a natureza contínua do processo de requisitos e a sua natureza moldável ao contexto do projecto ou organização;\n\nos diferentes actores do processos (frequentemente conhecidos como “stakeholders”);\n\ncomo gerir um processo de requisitos e como avaliar a sua qualidade e ainda como o melhorar.');
insert into TopicTranslations(topicId, language, name, description) values (3 ,'PT_PT', 'Levantamento de Requisitos', 'Sobre a origem dos requisitos (como Conhecimento próprio do Domínio, stakeholders, regras do negócio, etc.) e as técnicas para os coleccionar eficazmente (tais como entrevistas, cenários, protótipos, reuniões, etc.).');
insert into TopicTranslations(topicId, language, name, description) values (4 ,'PT_PT', 'Análise de Requisitos', 'Sobre como classificar requisitos quanto ao seu tipo, importância, estabilidade ou extensão;\n\nmodelação conceptual (tal como “Use Cases”, modelos de dados, modelos de estados, etc.).');
insert into TopicTranslations(topicId, language, name, description) values (5 ,'PT_PT', 'Especificação de Requisitos', 'Sobre a produção de um conjunto de documentos sobre os requisitos que possa ser sistematicamente revisto, avaliado e aprovado. Estes documentos são: a Definição do Sistema, Especificação dos Requisitos do Sistema e Especificação dos Requisitos do Software (derivados dos requisitos do sistema).');
insert into TopicTranslations(topicId, language, name, description) values (6 ,'PT_PT', 'Validação de Requisitos', 'Sobre as técnicas de validação dos requisitos levantados, tais como: Revisão por terceiros (“peer-review”), prototipagem, validação de modelos e testes de aceitação.');
insert into TopicTranslations(topicId, language, name, description) values (7 ,'PT_PT', 'Considerações Práticas', 'Sobre as particularidades práticas dos requisitos;\n\na natureza iterativa do processo de requisitos;\n\na gestão de alterações dos requisitos (como um todo ou em apenas alguns dos seus atributos);\n\nrastreamento de requisitos;\n\nmedição do peso dos requisitos na eventualidade de alteração do produto.');
                                                                               
insert into TopicTranslations(topicId, language, name, description) values (8 ,'PT_PT', 'Fundamentos de Desenho de Software',  'Sobre os conceitos gerais de desenho (como objectivo, restrições, alternativas, contexto etc.);\n\no processo de desenho (diferença entre desenho arquitectural e detalhado);\n\nos principios do desenho de software (como abstracção, acoplamento, coesão, decomposição, modularização, encapsulamento, separação de interface e implementação, suficiência, completividade, etc.).'); 
insert into TopicTranslations(topicId, language, name, description) values (9 ,'PT_PT', 'Problemas-chave no Desenho de Software', 'Sobre os problemas típicos no desenho de software como concorrência: controlo de eventos;\n\npersistência de dados;\n\ndistribuição de componentes e comunicação entre si;\n\ntratamento de erros e tolerância a falhas;\n\ninteracção e apresentação;\n\nsegurança.'); 
insert into TopicTranslations(topicId, language, name, description) values (10,'PT_PT', 'Estrutura e Arquitectura de Software', 'Sobre os modos de organizar o software a vários níveis de abstracção desde a macro-arquitectura até ao desenho detalhado do código;\n\nos diferentes estilos de arquitectura tais como construção por camadas, sistemas distribuídos (Cliente-Servidor, Three-Tiers, Broker), sistemas interactivos (Model-View-Controller, Presentation-Abstraction-Control), sistemas adaptáveis (microkernel ou reflexão) e outros;\n\nDesign Patterns (como “builder”, “factory”, “adapter”; “bridge”, “iterator”, “strategy”, etc.);\n\no cariz decisório do processo de design;\n\nfamilías de programas e “frameworks” de software.'); 
insert into TopicTranslations(topicId, language, name, description) values (11,'PT_PT', 'Desenho de Interface com o Utilizador', 'Sobre a eficaz comunicação com o utilizador do software;\n\nprincípios base de UI (facilidade de aprendizagem, familiaridade, consistência, surpresa mínima, diversidade de utilização, etc.);\n\nlidar com problemas comuns (interacção com utilizador e  apresentação de informação);\n\nas modalidades típicas de interacção (pergunta-resposta, manipulação directa, selecção em menus, formulários, linguagens de comandos, linguagem natural);\n\ncomo apresentar a informação (número de cores, mudanças de cores, “colour-coding”, visualização para pessoas com necessidades especiais);\n\no processo de design de UI (análise de utilização, prototipagem de software, avaliação da interface com o utilizador desenvolvida);\n\nadaptar a UI para localização e internacionalização;\n\nmetáforas e modelos conceptuais (tal como utilização de ícones reconhecidos universalmente para diversas acções comuns, tal como usar uma roldana para representar as definições).'); 
insert into TopicTranslations(topicId, language, name, description) values (12,'PT_PT', 'Análise de Qualidade e Avaliação', 'Sobre os atributos de qualidade do desenho (tais como portabilidade, testabilidade, robustez, performance, segurança, reutilizável, etc.);\n\ntécnicas de avaliação de qualidade (como revista de design por terceiros, análise estática formal – com modelos matemáticos -  ou informal, simulação ou prototipagem);\n\nmedidas de software para o seu tamanho, estrutura ou qualidade.'); 
insert into TopicTranslations(topicId, language, name, description) values (13,'PT_PT', 'Notações de Desenho de Software', 'Sobre a representação do desenho em diferentes artefactos universalmente compreendidos;\n\ndescrições de estrutura (diagramas de classe e objectos, diagramas de componentes, “class responsability cards”, diagramas de Entidade-Relacionamento, linguagens de descrição de interfaces, etc.);\n\ndescrições de comportamentos e dinâmicas entre componentes (diagramas de actividade, diagramas de comunicação, diagramas de fluxo de dados, tabelas e diagramas de decisão, diagramas de sequência, diagramas de transição de estados, pseudo-código, etc.).'); 
insert into TopicTranslations(topicId, language, name, description) values (14,'PT_PT', 'Estratégias e Métodos de Desenho de Software', 'Sobre como desenhar um sistema num ou mais paradigmas bem definidos, como Orientado a Funções, Orientado a Objectos, Centrado em Estruturas de Dados e Centrado em Componentes;\n\nas estratégias gerais de desenho como “divide-and-conquer”, “top-down”, “bottom-up”, etc.'); 
insert into TopicTranslations(topicId, language, name, description) values (15,'PT_PT', 'Ferramentas de Desenho de Software','Sobre ferramentas de ajuda à criação de artefactos do desenho de software, tipicamente também software, que consiga, por exemplo, criar modelos e diagramas ou possibilite uma análise de qualidade de modelos.'); 
                                                                
insert into TopicTranslations(topicId, language, name, description) values (16,'PT_PT', 'Fundamentos de Construção de Software', 'Sobre os conceitos fundamentais da construção de software, que são: Minimização de Complexidade, Antecipação de Mudanças, Construção para Verificação, Reutilização e Standards de Construção (relativo às convenções das linguagens de programação usadas, tal como nomenclatura de variáveis ou identação, etc.).' ); 
insert into TopicTranslations(topicId, language, name, description) values (17,'PT_PT', 'Gestão de Construção', 'Sobre como gerir um processo de construção através de Modelos de Ciclo de Vida (como as metodologias lineares estilo Waterfall ou iterativas tipo Agile);\n\no planeamento da construção (qual a ordem de actividades num processo de construção – isto é altamente dependente de que Modelo de construção é usado);\n\ncomo medir o que é criado (estatísticas sobre código, calendarização, esforço – novamente diferentes medidas dependem do Modelo escolhido, e.g. esforço é uma medida típica da metodologia scrum).' );
insert into TopicTranslations(topicId, language, name, description) values (18,'PT_PT', 'Considerações Práticas', 'Sobre o cariz predominantemente prático da construção;\n\na necessidade de fazer ajustamentos ou modificações de pequena escala ao Desenho durante a construção;\n\nas linguagens necessárias para construir software - como linguagens de configuração, linguagens de scripting, linguagens de programação, linguagens visuais, etc.;\n\nas características da codificação em si (construções semânticas, estruturas de controlo, tratamento de erros, organização do código em classes, modos de documentação do código, etc.);\n\ntestes de construção (testes unitários e testes de integração);\n\ntécnicas de construção para reutilização por terceiros (tais como estruturação de bibliotecas, utilização de padrões de desenho conhecidos);\n\nreutilização de software pré-existente (recurso a bibliotecas, repositórios públicos, etc.);\n\nqualidade na construção (testes de código, debugging, assertions, programação defensiva, code reviews, etc.);\n\nintegração do código num sistema (phase integration e incremental).' );
insert into TopicTranslations(topicId, language, name, description) values (19,'PT_PT', 'Tecnologias de Construção', 'Sobre como desenhar e usar APIs;\n\nproblemas típicos de paradigmas orientados aos objectos (como polimorfismo e reflexão);\n\ntipos parametrizados e genéricos;\n\nassertions, programação por interfaces e programação defensiva;\n\ntratamento de erros;\n\nmodelos executáveis (criação de um programa compilando um modelo executável de uma linguagem de modelação);\n\nprogramação baseada em estados e baseada em tabelas;\n\nconfiguração em runtime e internacionalização;\n\nprocessamento de gramáticas de linguagens;\n\nprimitivas de concorrência (semáforos, mutexes, monitores, etc.);\n\nmiddleware (software que providencia serviços entre a camada do SO e a camada aplicacional);\n\nprogramação para sistemas distribuídos;\n\nconstrução de sistemas heterogéneos (como Processadores de Sinais Digitais ou Sistemas Embebidos);\n\nanálise de performance e tuning (escolhas de arquitecturas, estruturas de dados ou selecção de algoritmos);\n\nstandards de plataformas (por exemplo J2EE vs J2SE);\n\ntest-driven development.' );
insert into TopicTranslations(topicId, language, name, description) values (20,'PT_PT', 'Ferramentas de Construção de Software', 'Sobre todo o tipo de ferramentas (tipicamente também software) que ajudam à construção de software tais como IDEs (ambientes de desenvolvimento integrado como Eclipse, Netbeans, Visual Studio, etc);\n\nconstrutores de Interfaces Gráficas (actualmente também parte de IDEs modernos);\n\nferramentas de Testes Unitários e ainda ferramentas de profiling de código, análise de performance e slicing.' );

insert into Topics(id,knowledgeareaid, language, name, description) values (21, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (22, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (23, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (24, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (25, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (26, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (27, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (28, 4, 'PT_PT',  );
insert into Topics(id,knowledgeareaid, language, name, description) values (29, 4, 'PT_PT',  );
