<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    
    <groupId>pt.sweranker.cmg</groupId>
    <artifactId>sweranker</artifactId>
    <version>1.0</version>
    
    <packaging>war</packaging>
    
    <developers>
        <developer>
            <id>1</id>
            <name>Carlos Gon√ßalves</name>
            <email>carlosmoliveiragoncalves@gmail.com</email>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
        </developer>
    </developers>
    
    <repositories>
        <repository>
            <id>payara-patched-externals</id>
            <name>Payara Patched Externals</name>
            <url>https://raw.github.com/payara/Payara_PatchedProjects/master</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    
    <profiles>
        <profile>
            <!-- DEV is the standard profile, it is a testless, wild environment  -->
            <id>dev</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <!-- TEST is the standard testing environment that will run unit tests only -->
            <id>test</id>
            <properties>
                <skipTests>false</skipTests>
            </properties>
        </profile>
        <profile>
            <id>debug</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <version>${payara-micro-plugin-version}</version>

                        <configuration>
                            <useUberJar>true</useUberJar>
                            <javaCommandLineOptions>
                                <option>
                                    <value>-Xdebug</value>
                                </option>
                                <option>
                                    <key>-Xrunjdwp:transport</key>
                                    <value>dt_socket,server=y,suspend=y,address=5005</value>
                                </option>
                            </javaCommandLineOptions>
                        </configuration>

                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    
    <prerequisites>
        <maven>3.6.3</maven>
    </prerequisites>
    
    <properties>
        <!--  General properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        
        <!--JAVA version -->
        <java-version>11</java-version>
        
        <!-- Payara Version -->
        <payaraVersion>5.194</payaraVersion>
        
        <!-- Maven plugin versions -->
        <ejb-plugin-version>3.0.1</ejb-plugin-version>
        <war-plugin-version>3.2.3</war-plugin-version>
        <ear-plugin-version>3.0.1</ear-plugin-version>
        <clean-plugin-version>3.1.0</clean-plugin-version>
        <compiler-plugin-version>3.8.1</compiler-plugin-version>
        <deploy-plugin-version>3.0.0-M1</deploy-plugin-version>
        <install-plugin-version>3.0.0-M1</install-plugin-version>
        <resources-plugin-version>3.1.0</resources-plugin-version>
        <surefire-plugin-version>3.0.0-M3</surefire-plugin-version>
        <surefire-reporting-plugin-version>3.0.0-M3</surefire-reporting-plugin-version>
        <failsafe-plugin-version>3.0.0-M3</failsafe-plugin-version>
        <jar-plugin-version>3.1.2</jar-plugin-version>
        <versions-plugin-version>2.7</versions-plugin-version>
        
        <!-- JAVA EE API, SPEC and IMPLEMENTATION versions -->
        <jakartaee-version>8.0.0</jakartaee-version>
        <microprofile-version>3.2</microprofile-version>
        <javaee-ws-rs-version>2.1</javaee-ws-rs-version>
        <jpa-spec-version>2.2.0</jpa-spec-version>
        <eclipse-link-version>2.7.4.payara-p2</eclipse-link-version>
        <ejb-spec-version>3.2</ejb-spec-version>
        <jersey-version>2.27</jersey-version>
        <jaxrs-jackson-version>2.9.7</jaxrs-jackson-version>
        <weld-osgi-version>3.1.0.Final</weld-osgi-version>
        <javax-mail-version>1.6.2</javax-mail-version>
        
        
        <!-- Library versions -->
    
    </properties>
    
    <build>
        <pluginManagement>
            <plugins>
            
                <!-- Maven Clean  Plugin , used to clean up after build -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${clean-plugin-version}</version>
                </plugin>
                
                <!-- Maven Compiler Plugin , for JARs -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${compiler-plugin-version}</version>
                    <configuration>
                        <release>${java-version}</release>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
                
                <!--  Maven Deploy plugin, to deploy built artifacts to a remote repository, not that we use it but at least this version is controlled -->
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${deploy-plugin-version}</version>
                </plugin>
                
                <!-- Maven Install plugin, install the build artifacts into the LOCAL repository -->
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${install-plugin-version}</version>
                </plugin>
                
                <!-- Maven Resources plugin, copies the resources to output directory to include in final JAR -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resources-plugin-version}</version>
                </plugin>
                
                
                <!-- Maven WAR Plugin, for WARs -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${war-plugin-version}</version>
                    <configuration>
                        <!-- Since we are using Servlet 3+ we do not need web.xml to register JAX-RS webservices so the war plugin must not fail if it doesn't find it -->
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                        <attachClasses>true</attachClasses>
                        <classesClassifier>classes</classesClassifier>
                        
                        <archive>
                            <addMavenDescriptor>false</addMavenDescriptor>
                        </archive>
                        
                    </configuration>
                </plugin>
                
                <!-- Surefire plugin used for testing -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefire-plugin-version}</version>
                    <configuration>
                        <reportsDirectory>${basedir}/../ffbuild/reports</reportsDirectory>
                        <groups>${groups}</groups>
                        <skipTests>${skipTests}</skipTests>
                        <argLine>
                            --illegal-access=permit
                        </argLine>
                    </configuration>
                </plugin>
                
                <!-- Failsafe plugin is used for integration test, but we are not using it yet, it is just to set the argLine for future reference -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${failsafe-plugin-version}</version>
                    <configuration>
                        <argLine>
                            --illegal-access=permit
                        </argLine>
                    </configuration>
                </plugin>
                
                <!-- This plugin is useful to check newer versions of dependencies or plugins, please check the goals here "https://www.mojohaus.org/versions-maven-plugin/plugin-info.html" -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions-plugin-version}</version>
                </plugin>
            
            </plugins>
        </pluginManagement>
    </build>
    
    
    <dependencies>
        <dependency>
         <groupId>jakarta.platform</groupId>
         <artifactId>jakarta.jakartaee-api</artifactId>
         <version>${jakartaee-version}</version>
         <scope>provided</scope>
     </dependency>
     <dependency>
         <groupId>org.eclipse.microprofile</groupId>
         <artifactId>microprofile</artifactId>
         <version>${microprofile-version}</version>
         <type>pom</type>
         <scope>provided</scope>
     </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
            <version>${jpa-spec-version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>${eclipse-link-version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa.modelgen.processor</artifactId>
            <version>${eclipse-link-version}</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-osgi-bundle</artifactId> <!-- Loaded this osgi artifact because it is provided by Glassfish -->
            <version>${weld-osgi-version}</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey-version}</version>
        </dependency>
    </dependencies>
        
</project>